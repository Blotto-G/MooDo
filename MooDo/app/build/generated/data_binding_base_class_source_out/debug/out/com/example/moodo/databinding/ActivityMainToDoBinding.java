// Generated by view binder compiler. Do not edit!
package com.example.moodo.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.moodo.R;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainToDoBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button activeList;

  @NonNull
  public final Button allList;

  @NonNull
  public final ImageView btnClose;

  @NonNull
  public final FloatingActionButton btnComplete;

  @NonNull
  public final FloatingActionButton btnDelete;

  @NonNull
  public final FloatingActionButton btnUpdate;

  @NonNull
  public final FloatingActionButton btnWrite;

  @NonNull
  public final Button completeList;

  @NonNull
  public final LinearLayout linearLayout2;

  @NonNull
  public final LinearLayout linearLayout5;

  @NonNull
  public final ImageView logo;

  @NonNull
  public final ConstraintLayout main;

  @NonNull
  public final RecyclerView selectDay;

  @NonNull
  public final RecyclerView tdListRecycler;

  private ActivityMainToDoBinding(@NonNull ConstraintLayout rootView, @NonNull Button activeList,
      @NonNull Button allList, @NonNull ImageView btnClose,
      @NonNull FloatingActionButton btnComplete, @NonNull FloatingActionButton btnDelete,
      @NonNull FloatingActionButton btnUpdate, @NonNull FloatingActionButton btnWrite,
      @NonNull Button completeList, @NonNull LinearLayout linearLayout2,
      @NonNull LinearLayout linearLayout5, @NonNull ImageView logo, @NonNull ConstraintLayout main,
      @NonNull RecyclerView selectDay, @NonNull RecyclerView tdListRecycler) {
    this.rootView = rootView;
    this.activeList = activeList;
    this.allList = allList;
    this.btnClose = btnClose;
    this.btnComplete = btnComplete;
    this.btnDelete = btnDelete;
    this.btnUpdate = btnUpdate;
    this.btnWrite = btnWrite;
    this.completeList = completeList;
    this.linearLayout2 = linearLayout2;
    this.linearLayout5 = linearLayout5;
    this.logo = logo;
    this.main = main;
    this.selectDay = selectDay;
    this.tdListRecycler = tdListRecycler;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainToDoBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainToDoBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main_to_do, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainToDoBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.activeList;
      Button activeList = ViewBindings.findChildViewById(rootView, id);
      if (activeList == null) {
        break missingId;
      }

      id = R.id.allList;
      Button allList = ViewBindings.findChildViewById(rootView, id);
      if (allList == null) {
        break missingId;
      }

      id = R.id.btnClose;
      ImageView btnClose = ViewBindings.findChildViewById(rootView, id);
      if (btnClose == null) {
        break missingId;
      }

      id = R.id.btnComplete;
      FloatingActionButton btnComplete = ViewBindings.findChildViewById(rootView, id);
      if (btnComplete == null) {
        break missingId;
      }

      id = R.id.btnDelete;
      FloatingActionButton btnDelete = ViewBindings.findChildViewById(rootView, id);
      if (btnDelete == null) {
        break missingId;
      }

      id = R.id.btnUpdate;
      FloatingActionButton btnUpdate = ViewBindings.findChildViewById(rootView, id);
      if (btnUpdate == null) {
        break missingId;
      }

      id = R.id.btnWrite;
      FloatingActionButton btnWrite = ViewBindings.findChildViewById(rootView, id);
      if (btnWrite == null) {
        break missingId;
      }

      id = R.id.completeList;
      Button completeList = ViewBindings.findChildViewById(rootView, id);
      if (completeList == null) {
        break missingId;
      }

      id = R.id.linearLayout2;
      LinearLayout linearLayout2 = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout2 == null) {
        break missingId;
      }

      id = R.id.linearLayout5;
      LinearLayout linearLayout5 = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout5 == null) {
        break missingId;
      }

      id = R.id.logo;
      ImageView logo = ViewBindings.findChildViewById(rootView, id);
      if (logo == null) {
        break missingId;
      }

      ConstraintLayout main = (ConstraintLayout) rootView;

      id = R.id.selectDay;
      RecyclerView selectDay = ViewBindings.findChildViewById(rootView, id);
      if (selectDay == null) {
        break missingId;
      }

      id = R.id.tdListRecycler;
      RecyclerView tdListRecycler = ViewBindings.findChildViewById(rootView, id);
      if (tdListRecycler == null) {
        break missingId;
      }

      return new ActivityMainToDoBinding((ConstraintLayout) rootView, activeList, allList, btnClose,
          btnComplete, btnDelete, btnUpdate, btnWrite, completeList, linearLayout2, linearLayout5,
          logo, main, selectDay, tdListRecycler);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
